# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.7.0
#
# <auto-generated>
#
# Generated from file `RadarUtil.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module xidianRadar
_M_xidianRadar = Ice.openModule('xidianRadar')
__name__ = 'xidianRadar'

if '_t_IntList' not in _M_xidianRadar.__dict__:
    _M_xidianRadar._t_IntList = IcePy.defineSequence('::xidianRadar::IntList', (), IcePy._t_int)

if '_t_IntIntList' not in _M_xidianRadar.__dict__:
    _M_xidianRadar._t_IntIntList = IcePy.defineSequence('::xidianRadar::IntIntList', (), _M_xidianRadar._t_IntList)

_M_xidianRadar._t_RadarUtil = IcePy.defineValue('::xidianRadar::RadarUtil', Ice.Value, -1, (), False, True, None, ())

if 'RadarUtilPrx' not in _M_xidianRadar.__dict__:
    _M_xidianRadar.RadarUtilPrx = Ice.createTempClass()
    class RadarUtilPrx(Ice.ObjectPrx):

        def recognitionRadar(self, r, context=None):
            return _M_xidianRadar.RadarUtil._op_recognitionRadar.invoke(self, ((r, ), context))

        def recognitionRadarAsync(self, r, context=None):
            return _M_xidianRadar.RadarUtil._op_recognitionRadar.invokeAsync(self, ((r, ), context))

        def begin_recognitionRadar(self, r, _response=None, _ex=None, _sent=None, context=None):
            return _M_xidianRadar.RadarUtil._op_recognitionRadar.begin(self, ((r, ), _response, _ex, _sent, context))

        def end_recognitionRadar(self, _r):
            return _M_xidianRadar.RadarUtil._op_recognitionRadar.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_xidianRadar.RadarUtilPrx.ice_checkedCast(proxy, '::xidianRadar::RadarUtil', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_xidianRadar.RadarUtilPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::xidianRadar::RadarUtil'
    _M_xidianRadar._t_RadarUtilPrx = IcePy.defineProxy('::xidianRadar::RadarUtil', RadarUtilPrx)

    _M_xidianRadar.RadarUtilPrx = RadarUtilPrx
    del RadarUtilPrx

    _M_xidianRadar.RadarUtil = Ice.createTempClass()
    class RadarUtil(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::xidianRadar::RadarUtil')

        def ice_id(self, current=None):
            return '::xidianRadar::RadarUtil'

        @staticmethod
        def ice_staticId():
            return '::xidianRadar::RadarUtil'

        def recognitionRadar(self, r, current=None):
            raise NotImplementedError("servant method 'recognitionRadar' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_xidianRadar._t_RadarUtilDisp)

        __repr__ = __str__

    _M_xidianRadar._t_RadarUtilDisp = IcePy.defineClass('::xidianRadar::RadarUtil', RadarUtil, (), None, ())
    RadarUtil._ice_type = _M_xidianRadar._t_RadarUtilDisp

    RadarUtil._op_recognitionRadar = IcePy.Operation('recognitionRadar', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_xidianRadar._t_IntIntList, False, 0),), (), ((), _M_xidianRadar._t_IntList, False, 0), ())

    _M_xidianRadar.RadarUtil = RadarUtil
    del RadarUtil

# End of module xidianRadar
